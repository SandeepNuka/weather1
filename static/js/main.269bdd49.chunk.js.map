{"version":3,"sources":["components/wether.component.js","components/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","country","weathericon1","temp_celsius","temp_min","temp_max","description","Form","error1","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getweather","e","a","preventDefault","target","elements","value","fetch","api_call","json","responce","console","log","setState","sys","celsius","calCulateCelsius","main","temp","weather","error","get_weather","weathericon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeid","this","temp_crlsius","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.269bdd49.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"container-fluid text-light\">\r\n      <div className=\"cards pt-4\"> </div>\r\n      <h1>\r\n        {props.city}\r\n\r\n        {\"      \"}\r\n        {props.country}\r\n      </h1>\r\n      <h5 className=\"py-4\">\r\n        <i className={`wi ${props.weathericon1} display-1`} />\r\n      </h5>\r\n      {props.temp_celsius ? (\r\n        <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n      ) : null}\r\n\r\n      {/**show max and min temp */}\r\n      {minmaxTemp(props.temp_min, props.temp_max)}\r\n      <h4 className=\"py-3\">{props.description} </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n  if (min & max) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">Min {min}&deg;</span>\r\n        <span className=\"px-4\">Max {max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error1 ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 py-1\">\r\n            <button className=\"btn btn-outline-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger my-3 \" role=\"alert\">\r\n      Please Enter City and Country\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport Weather from \"./components/wether.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./components/form.component\";\n\nconst Apikey = \"4247723607fb53faf9465b394958111e\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false,\n    };\n\n    this.weathericon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n  calCulateCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n  get_weather(icons, rangeid) {\n    switch (true) {\n      case rangeid >= 200 && rangeid <= 232:\n        this.setState({ icon: this.weathericon.Thunderstorm });\n        break;\n      case rangeid >= 300 && rangeid <= 321:\n        this.setState({ icon: this.weathericon.Drizzle });\n        break;\n\n      case rangeid >= 500 && rangeid <= 531:\n        this.setState({ icon: this.weathericon.Rain });\n        break;\n      case rangeid >= 600 && rangeid <= 622:\n        this.setState({ icon: this.weathericon.Snow });\n        break;\n      case rangeid >= 701 && rangeid <= 781:\n        this.setState({ icon: this.weathericon.Atmosphere });\n        break;\n      case rangeid === 800:\n        this.setState({ icon: this.weathericon.Clear });\n        break;\n      case rangeid >= 801 && rangeid <= 804:\n        this.setState({ icon: this.weathericon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weathericon.Clouds });\n    }\n  }\n\n  getweather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Apikey}`\n      );\n      const responce = await api_call.json();\n      console.log(responce);\n\n      this.setState({\n        city: responce.name,\n        country: responce.sys.country,\n        celsius: this.calCulateCelsius(responce.main.temp),\n        temp_max: this.calCulateCelsius(responce.main.temp_max),\n        temp_min: this.calCulateCelsius(responce.main.temp_min),\n        description: responce.weather[0].description,\n        error: false,\n      });\n      this.get_weather(this.weathericon, responce.weather[0].id);\n    } else {\n      this.setState({ error: true });\n      console.log();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getweather} error1={this.state.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_crlsius={this.state.celsius}\n          temp_min={this.state.temp_min}\n          temp_max={this.state.temp_max}\n          temp_celsius={this.state.celsius}\n          description={this.state.description}\n          weathericon1={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}